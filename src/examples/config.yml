# Example configuration file for Roxy Docker Socket Proxy
# This file demonstrates various rule types and options available in Roxy

rules:
  # ===== Basic Endpoint and Method Matching =====
  # Allow listing containers from specific binaries
  - endpoint: /containers/json
    methods: [GET]
    allow: true
    process_binaries: ["/usr/bin/docker", "/usr/local/bin/docker-compose"]

  # ===== Query Parameter Matching =====
  # Example 1: Required query parameters
  # Allow listing containers with specific query parameters that must be present
  - endpoint: /containers/json
    methods: [GET]
    allow: true
    process_binaries: ["/usr/bin/docker", "/usr/local/bin/docker-compose"]
    match_query_params: required  # Query parameters must match the specified patterns
    query_params:
      limit: "^\\d+$"  # Only digits
      all: "^(true|false)$"  # Only true or false

  # Example 2: Optional query parameters
  # Allow listing containers with optional query parameters
  - endpoint: /containers/json
    methods: [GET]
    allow: true
    process_binaries: ["/usr/bin/docker", "/usr/local/bin/docker-compose"]
    match_query_params: optional  # Query parameters must match if present, but can be missing
    query_params:
      limit: "^\\d+$"  # Only digits
      all: "^(true|false)$"  # Only true or false

  # Example 3: Ignore query parameters
  # Allow listing containers regardless of query parameters
  - endpoint: /containers/json
    methods: [GET]
    allow: true
    process_binaries: ["/usr/bin/docker", "/usr/local/bin/docker-compose"]
    match_query_params: ignore  # Query parameters are completely ignored when matching this rule

  # Example 4: Regex patterns for parameter names
  # Allow listing containers with regex patterns for parameter names
  - endpoint: /containers/json
    methods: [GET]
    allow: true
    process_binaries: ["/usr/bin/docker", "/usr/local/bin/docker-compose"]
    match_query_params: required  # Query parameters must match the specified patterns
    query_params:
      "^lim\\w+$": "^\\d+$"  # Parameter name starts with "lim", value is digits
      "^a\\w+$": "^(true|false)$"  # Parameter name starts with "a", value is true or false

  # ===== Path Variables =====
  # Example 1: Single path variable
  # Allow inspecting containers using path variables
  - endpoint: /containers/{container_id}/json
    methods: [GET]
    allow: true
    process_binaries: ["/usr/bin/docker", "/usr/local/bin/docker-compose"]
    path_variables:
      container_id: ".*"  # Match any container ID
    # Example of response_rules to ensure container is not privileged
    response_rules:
      "$.HostConfig.Privileged": false

  # Example 2: Multiple path variables
  # Allow accessing container logs with multiple path variables
  - endpoint: /containers/{container_id}/logs/{log_type}
    methods: [GET]
    allow: true
    process_binaries: ["/usr/bin/docker", "/usr/local/bin/docker-compose"]
    path_variables:
      container_id: "[a-f0-9]+"  # Match container IDs with hexadecimal characters
      log_type: "stdout|stderr"  # Match only stdout or stderr

  # ===== Regex Path Matching =====
  # Allow inspecting containers using regex pattern
  - endpoint: "^/containers/[a-f0-9]+/json$"  # Match container IDs with hexadecimal characters
    methods: [GET]
    allow: true
    process_binaries: ["/usr/bin/docker", "/usr/local/bin/docker-compose"]

  # ===== Request Body Validation =====
  # Allow creating containers but restrict options
  - endpoint: /containers/create
    methods: [POST]
    allow: true
    process_binaries: ["/usr/bin/docker"]
    # json_conditions is deprecated, use request_rules instead
    request_rules:
      "$.HostConfig.Privileged": false  # Ensure containers are not privileged
      "$.HostConfig.PidMode": null      # Ensure PidMode is not set

  # Allow starting, stopping, and removing containers
  - endpoint: /containers/
    methods: [POST]
    allow: true
    process_binaries: ["/usr/bin/docker"]

  # ===== Response Body Validation =====
  # Allow listing images with response validation
  - endpoint: /images/json
    methods: [GET]
    allow: true
    process_binaries: ["/usr/bin/docker", "/usr/local/bin/docker-compose"]
    response_rules:
      "$[0].RepoTags": ["*"]  # Ensure images have tags

  # ===== Combined Request and Response Rules =====
  # Example of using both request_rules and response_rules
  - endpoint: /images/json
    methods: [GET]
    allow: true
    process_binaries: ["/usr/bin/docker", "/usr/local/bin/docker-compose"]
    request_rules:
      "$.filters.reference": null  # No specific reference filter
    response_rules:
      "$[0].RepoTags": ["*"]  # Ensure images have tags

  # ===== Other Docker API Examples =====
  # Allow pulling images
  - endpoint: /images/create
    methods: [POST]
    allow: true
    process_binaries: ["/usr/bin/docker", "/usr/local/bin/docker-compose"]

  # Allow inspecting images
  - endpoint: /images/
    methods: [GET]
    allow: true
    process_binaries: ["/usr/bin/docker"]

  # Allow listing networks
  - endpoint: /networks
    methods: [GET]
    allow: true
    process_binaries: ["/usr/bin/docker", "/usr/local/bin/docker-compose"]

  # Allow listing volumes
  - endpoint: /volumes
    methods: [GET]
    allow: true
    process_binaries: ["/usr/bin/docker", "/usr/local/bin/docker-compose"]

  # ===== Deny Rules =====
  # Explicitly deny access to system containers
  - endpoint: /containers/system
    allow: false
    # No methods specified means all methods are matched
    # No process_binaries specified means all processes are matched

  # Deny all other requests to the containers endpoint that don't match previous rules
  - endpoint: /containers
    allow: false
    # This acts as a catch-all rule for any container-related endpoints not explicitly allowed above
